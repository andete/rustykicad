// (c) 2016 Productize SPRL <joost@productize.be>

/// (start -1.5 0.7)
#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub struct Start (f64, f64);

/// (end -1.5 0.7)
#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub struct End (f64, f64);

/// (at -1.5 0.7)
#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub struct At (f64, f64);

/// (size -1.5 0.7)
#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub struct Size (f64, f64);

#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub struct Xyz (f64, f64, f64);

/// (fp_line (start -1.5 0.7) (end 1.5 0.7) (layer Dwgs.User) (width 0.1))
#[derive(Deserialize, Serialize, Debug, PartialEq)]
#[allow(non_camel_case_types)] 
pub struct Fp_Line {
    start:Start,
    end:End,
    layer:String,
    width:f64,
}

/// (xy -0.25 -1.15)
#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub struct Xy (f64, f64);

///  (pts (xy -0.25 -1.15) (xy -0.25 -0.65) (xy 0.25 -0.65) (xy 0.25 -1.15) (xy -0.25 -1.15))
#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub struct Pts (Vec<Xy>);

/// (fp_poly (pts (xy -1.2 0.65) (xy -1.2 1.15) (xy -0.7 1.15) (xy -0.7 0.65) (xy -1.2 0.65)) (layer Dwgs.User) (width 0.15))
#[derive(Deserialize, Serialize, Debug, PartialEq)]
#[allow(non_camel_case_types)] 
pub struct Fp_Poly {
    pts:Pts,
    layer:String,
    width:f64,
}

#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub struct Layer (String, f64);

/// (font (size 0.625 0.625) (thickness 0.1))
#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub struct Font {
    size:Size,
    thickness:f64,
}

///  (fp_text value MOSFET-N-GSD (at 0 2.6) (layer F.SilkS) hide (effects (font (size 0.625 0.625) (thickness 0.1))))
#[derive(Deserialize, Serialize, Debug, PartialEq)]
#[allow(non_camel_case_types)] 
pub struct Fp_Text {
    value_type_:String,
    value_:String,
    at:At,
    layer:String,
    hide_:Option<String>,
    effects:Font,
}

#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub enum PadType {
    Smd,
    // TODO
}

#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub enum PadShape {
    Rect,
    // TODO
}

#[derive(Deserialize, Serialize, Debug, PartialEq)]
#[allow(non_camel_case_types)] 
pub struct Pad {
    index_:i64,
    type_:PadType,
    shape_:PadShape,
    at:At,
    size:Size,
    layers:Vec<String>,
}

#[derive(Deserialize, Serialize, Debug, PartialEq)]
#[allow(non_camel_case_types)] 
pub struct Model {
    file_:String,
    at:Xyz,
    scale:Xyz,
    rotate:Xyz,
}
#[derive(Deserialize, Serialize, Debug, PartialEq)]
#[allow(non_camel_case_types)] 
pub struct Module(Vec<ModuleElement>);

#[allow(non_camel_case_types)] 
#[derive(Deserialize, Serialize, Debug, PartialEq)]
pub enum ModuleElement {
    Name_(String),
    Layer(String),
    TEdit(String),
    Descr(String),
    FP_Text(Fp_Text),
    FP_Line(Fp_Line),
    FP_Poly(Fp_Poly),
    Pad(Pad),
    Model(Model),
}
